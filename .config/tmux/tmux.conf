# cat << EOF > /dev/null

# -- general

set -g default-terminal "screen-256color"
if 'infocmp -x tmux-256color > /dev/null 2>&1' 'set -g default-terminal "tmux-256color"'

tmux_dir="~/.config/tmux"
tmux_conf_dir="$tmux_dir/conf"
tmux_plugins_dir="$tmux_dir/plugins"

setw -g xterm-keys on
set -s escape-time 0
set -sg repeat-time 300
set -s focus-events on

# -- prefix
unbind C-b
set -g prefix C-a
# Allows us to use C-a a <command> to send commands to a TMUX session inside

# another TMUX session
bind-key a send-prefix


set -g mouse on
set -sg exit-empty on

set -q -g status-utf8 on
setw -q -g utf8 on

set -g visual-activity off
setw -g monitor-activity off
setw -g monitor-bell off

set -g history-limit 10000

set-hook -g pane-focus-in "run -b 'bash ~/.config/tmux/fzf_panes.tmux update_mru_pane_ids'"
bind M-w run -b 'bash ~/.config/tmux/fzf_panes.tmux new_window'

# reload configuration
bind r source-file "$tmux_dir/tmux.conf" \; display 'tmux.conf sourced'

set -ga update-environment '\
DISPLAY DBUS_SESSION_BUS_ADDRESS \
QT_IM_MODULE QT_QPA_PLATFORMTHEME \
SESSION_MANAGER \
XDG_CONFIG_HOME XDG_CACHE_HOME XDG_DATA_HOME\
XDG_MENU_PREFIX XDG_RUNTIME_DIR XDG_SESSION_CLASS \
XDG_SESSION_DESKTOP XDG_SESSION_TYPE XDG_CURRENT_DESKTOP \
XMODIFIERS \
FZF_DEFAULT_OPTS \
'
# set-hook -g client-attached 'run -b "cut -c3- ~/config/tmux/tmux.conf | sh -s update_env_event"'

# -- display
set -g base-index 1
setw -g pane-base-index 1

setw -g automatic-rename on
set -g renumber-windows on

set -g set-titles on

set -g display-panes-time 2000
set -g display-time 2000

set -g status-interval 1

# create session
bind s new-session

# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.2' \; clear-history

# window management
bind M-n new-window -c "#{pane_current_path}"
bind M-b break-pane
bind M-q kill-pane

# window navigation
unbind 1
unbind 2
unbind 3
unbind 4
unbind 5
unbind 6
unbind 7
unbind 8
unbind 9
unbind 0
bind -r o previous-window
bind -r h next-window

bind u split-window -vb -c "#{pane_current_path}"
bind e split-window -v -c "#{pane_current_path}"
bind n split-window -hb -c "#{pane_current_path}"
bind i split-window -h -c "#{pane_current_path}"

bind M-1 select-window -t 1
bind M-2 select-window -t 2
bind M-3 select-window -t 3
bind M-4 select-window -t 4
bind M-5 select-window -t 5
bind M-6 select-window -t 6
bind M-7 select-window -t 7
bind M-8 select-window -t 8
bind M-9 select-window -t 9


bind M-! join-pane -t :1
bind M-@ join-pane -t :2
bind 'M-#' join-pane -t :3
bind 'M-$' join-pane -t :4
bind M-% join-pane -t :5
bind M-^ join-pane -t :6
bind M-& join-pane -t :7
bind M-* join-pane -t :8
bind M-( join-pane -t :9

bind M-f resize-pane -Z

# pane navigation
bind 1 select-pane -t:.1
bind 2 select-pane -t:.2
bind 3 select-pane -t:.3
bind 4 select-pane -t:.4
bind 5 select-pane -t:.5
bind 6 select-pane -t:.6
bind 7 select-pane -t:.7
bind 8 select-pane -t:.8
bind 9 select-pane -t:.9
bind 0 select-pane -t:.10
bind > swap-pane -D
bind < swap-pane -U
bind | swap-pane
bind -n M-Space next-layout

bind W choose-tree -Z
bind S choose-tree 'move-pane -v -s "%%"'
bind V choose-tree 'move-pane -h -s "%%"'

# find session
bind C-s command-prompt -p find-session 'switch-client -t %%'

# session navigation
bind BTab switch-client -l  # move to last session

bind Tab last-window        # move to last active window

set -g status-keys emacs
set -g mode-keys vi

bind Enter copy-mode

bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind -T copy-mode-vi n send-keys -X cursor-left
bind -T copy-mode-vi i send-keys -X cursor-right
bind -T copy-mode-vi u send-keys -X cursor-up
bind -T copy-mode-vi e send-keys -X cursor-down
bind -T copy-mode-vi h send-keys -X next-word-end
bind -T copy-mode-vi U send-keys -N 5 -X cursor-up
bind -T copy-mode-vi E send-keys -N 5 -X cursor-down
bind -T copy-mode-vi N send-keys -X start-of-line
bind -T copy-mode-vi I send-keys -X end-of-line
bind -T copy-mode-vi Y send-keys -X copy-end-of-line
bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel
bind -T copy-mode-vi = send-keys -X search-again
bind -T copy-mode-vi = send-keys -X search-reverse

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'

bind b list-buffers
bind p paste-buffer
bind P choose-buffer

# -- toggle_syn_input
bind C-g if-shell '[[ $(tmux showw synchronize-panes | cut -d\  -f2) == "on" ]]' \
'setw synchronize-panes off; set -g pane-border-style fg=magenta' \
'setw synchronize-panes on; set -g pane-border-style fg=red'

# -- toggle_status
bind s if-shell '[[ $(tmux show -g status | cut -d\  -f2) == "on" ]]' \
'set -g status off' \
'set -g status on'

# -- fzf_url
# bind l run -b 'cut -c3- ~/.tmux.conf | sh -s fzf_url'

# run 'cut -c3- ~/.tmux.conf | sh -s bind_with_sys_clipboard'

# -- theme
#set -g status off

# panes
#setw -g pane-border-status bottom
#set -g pane-active-border-style fg=brightblue
#set -g pane-border-style fg=magenta

# windows
# set -g status-justify 'centre'
# set -g status-left-length 90
# set -g status-right-length 140
# setw -g window-status-separator ''

# default statusbar colors
# set -g status-bg black
#set -g status-left ' #[fg=magenta,bold]❐ #S'
#set -g status-left '#[fg=brightyellow] #{?client_prefix,⌨ ,  }  #[fg=magenta,bold] %Y-%m-%d %H:%M '
#set -g status-right '#(rainbarf --battery --remaining --bolt --tmux --rgb)'
#set -g status-left "#[fg=magenta,bold] %Y-%m-%d %H:%M | #[fg=brightblue]#(curl icanhazip.com) #(ifconfig en0 | grep 'inet ' | awk '{print \"en0 \" $2}') #(ifconfig en1 | grep 'inet ' | awk '{print \"en1 \" $2}') #(ifconfig en3 | grep 'inet ' | awk '{print \"en3 \" $2}') #(ifconfig tun0 | grep 'inet ' | awk '{print \"vpn \" $2}') "
# setw -g window-status-format '#[fg=brightblue] #I #W '
# setw -g window-status-current-format '#[fg=magenta,bold] #I #W:#F'
# setw -g window-status-activity-style bg=black
# setw -g window-status-bell-style bg=black
#set-window-option -g window-status-current-format "#[fg=colour235, bg=colour27]⮀#[fg=colour255, bg=colour27] #I ⮁ #W #[fg=colour27, bg=colour235]⮀"


# set-option -g status-left "#(~/.config/tmux/tmux-powerline/powerline.sh left)"
# set-option -g status-right "#(~/.config/tmux/tmux-powerline/powerline.sh right)"

# run-shell ~/.config/tmux/extrakto/extrakto.tmux
# source -q ~/.tmux.conf.local
#set-option -g status-utf8 on
#set -g status-left '#(rainbarf --battery --remaining --bolt --rgb)'

# set-option default-path "$PWD"

# list tmux plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-open'
# set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'jimeh/tmux-themepack'
set -g @plugin 'thuanOwa/tmux-fzf-session-switch'
set -g @plugin 'akohlbecker/aw-watcher-tmux'
set -g @plugin 'laktak/extrakto'
set -g @plugin 'schasse/tmux-jump'
set -g @plugin 'olimorris/tmux-pomodoro-plus'
set -g @plugin '27medkamal/tmux-session-wizard'
set -g @plugin 'tmux-plugins/tmux-cpu'              # Display CPU performance
set -g @plugin 'tmux-plugins/tmux-battery'          # Battery status in tmux
set -g @plugin 'MunifTanjim/tmux-mode-indicator'    # Display current tmux mode
set -g @plugin 'tmux-plugins/tmux-online-status'    # Are we connected to the internet?!

set -g @themepack 'powerline/double/cyan'
set -g @continuum-restore 'on'
set -g @resurrect-capture-pake-contents 'on'
set -g @fzf-goto-session 's'
set -g @fzf-goto-win-width 70
set -g @fzf-goto-win-height 20
run '~/.tmux/plugins/tpm/tpm'


# Tmux doesn't pass <S-CR> codes to Neovim
# https://stackoverflow.com/questions/16359878/how-to-map-shift-enter
bind -n S-Enter send-keys Escape "[13;2u"

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-n if-shell "$is_vim" 'send-keys C-n'  'select-pane -L'
bind-key -n C-e if-shell "$is_vim" 'send-keys C-e'  'select-pane -D'
bind-key -n C-u if-shell "$is_vim" 'send-keys C-u'  'select-pane -U'
bind-key -n C-i if-shell "$is_vim" 'send-keys C-i'  'select-pane -R'

bind-key -n C-Left if-shell "$is_vim" 'send-keys C-Left' 'resize-pane -L 3'
bind-key -n C-Down if-shell "$is_vim" 'send-keys C-Down' 'resize-pane -D 3'
bind-key -n C-Up if-shell "$is_vim" 'send-keys C-Up' 'resize-pane -U 3'
bind-key -n C-Right if-shell "$is_vim" 'send-keys C-Right' 'resize-pane -R 3'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-n' select-pane -L
bind-key -T copy-mode-vi 'C-e' select-pane -D
bind-key -T copy-mode-vi 'C-u' select-pane -U
bind-key -T copy-mode-vi 'C-i' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l
